$o-topper-is-silent: false;

@import '../../main';

@include oTopperOutputThemes;

body {
	@include oColorsFor(page, background);
}

.o-topper__debug-header {
	@include oTypographyHeadline;
}

@function map-truthy-keys($map) {
	$out: ();

	@each $key, $value in $map {
		@if $value {
			$out: append($out, $key);
		}
	}

	@return $out;
}

.o-topper__debug {
	@include oTypographySize(0);
	font-family: 'Iosevka', 'Menlo', 'Consolas', monospace;
	white-space: pre-wrap;
}

.o-topper__debug-providers:after {
	content: quote(_o-topper-join-string(
		map-truthy-keys($_o-topper-debug-providers-with-no-receive),
		'\A'
	));
}

@function list-uniq($list) {
	$set: ();
	@each $item in $list {
		$set: map-merge($set, ($item: true));
	}

	@return map-keys($set);
}

.o-topper__debug-ns:after {
	$strs: ();
	@each $ns, $keys in $_o-topper-provider-namespaces {
		$strs: append($strs, $ns + ': (\A   ' + _o-topper-join-string(list-uniq($keys), ',\A   ') + '\A),');
	}

	content: quote(_o-topper-join-string($strs, '\A\A'));
}

.o-topper__debug-classes:after {
	$strs: ();
	@each $ns, $keys in $_o-topper-provider-namespaces {
		@each $key in list-uniq($keys) {
			@if str-length($key) != 0 {
				$strs: append($strs, _o-topper-provider-class($ns, $key));
			}
		}
	}

	content: quote(_o-topper-join-string($strs, '\A'));
}

.o-topper__debug-grid {
	display: flex;
}

.o-topper__debug-item {
	margin: 1em;
	flex-basis: 33.333%;
}

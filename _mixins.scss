// scss-lint:disable SelectorFormat

@mixin colorBorder($color) {
	.topper__headline::after {
		border-bottom: 6px solid $color;
		@include oGridRespondTo($from: L) {
			border-bottom-width: 8px;
		}
	}
}

// uses topper background colour to set background and pick contrasting text color
@mixin setColors($bg-color) {
	[data-textbox-background~='#{$bg-color}'] {
		$text-color: black;
		$contrast: lightness(getColor($bg-color));
		@if $contrast <= 50% {
			$text-color: white;
			.topper__standfirst a {
				color: $text-color;
				border-bottom-color: $text-color;
				&:hover {
					color: darken($text-color, 20%);
					border-bottom-color: darken($text-color, 20%);
				}
			}
		}
		@include colorBorder($text-color);
		@if $bg-color == 'wheat' {
			background-color: oColorsMix($color: 'wheat', $percentage: 40);
		} @else {
			background-color: getColor('#{$bg-color}');
		}
		color: $text-color;
		@if $bg-color == 'paper' or $bg-color == 'wheat' {
			.topper__tags {
				color: getColor('claret');
			}
		}
	}
}

/// @param {list} $colors - colors available to editorial in methode for the background
/// @param {map} $use-case - tentative options for default
// default has yet to be determined by type of article (opinion? analysis?) so is paper for now
$colors: 'white', 'black', 'claret', 'oxford', 'paper', 'slate', 'wheat', 'default';
@each $color in $colors {
	@if $color == 'default' {
		$usecase: ('standard': 'paper', 'analysis': 'claret', 'opinion':'oxford');
		@include setColors(map-get($usecase, 'standard'));
	} @else {
		@include setColors($color);
	}
}

@mixin headlineFontSize($size) {
	font-size: $size;
	.o-typography--loaded-serifDisplayBold & {
		font-size: $size * 1.077;
	}
}

@mixin alignText($position) {
	$mleft: ('left': 0, 'center': auto, 'right': auto);
	$mright: ('left': auto, 'center': auto, 'right': 0);
	$value: ('left': flex-start, 'center': center, 'right': flex-end);

	.topper__headline--large:after {
		margin-left: map-get($mleft, #{$position});
		margin-right: map-get($mright, #{$position});
	}
	.topper__text-wrapper {
		text-align: $position;
		align-self: map-get($value, #{$position});
	}

	.topper__tags {
		justify-content: map-get($value, #{$position});
	}
}

@mixin overlayText {
	.topper__background {
		position: absolute;
		top: 0;
		left: 0;
		height: inherit;
		min-height: inherit;
		width: 100%;
	}
}

@mixin fullBleedImage {
	.topper__text-box {
		background: transparent;
	}
	.topper__visual {
		width: 100%;
	}
	.topper__text-wrapper {
		z-index: 1;
	}
}

@mixin stackTags {
	.topper__tags {
		flex-direction: column;
		justify-content: center;
		padding-bottom: 15px;
		.n-content-tag {
			padding-bottom: 5px;
		}
	}
}

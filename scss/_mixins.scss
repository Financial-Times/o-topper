// scss-lint:disable SelectorFormat

@function -o-topper-join-string($list, $separator: '') {
	$result: '';
	$first: true;

	@each $item in $list {
	  @if ($first) {
		 $result: $item;
		 $first: false;
	  } @else {
		 $result: $result + $separator + $item;
	  }
	}

	@return $result;
}

@mixin _oTopperReceive($paths...) {
	@each $keys in $paths {
		$-debug-providers-with-no-receive: map-remove(
			$-debug-providers-with-no-receive,
			-o-topper-join-string($keys, '-')
		) !global;

		@extend %-o-topper-receive-#{-o-topper-join-string($keys, '-')};
	}
}

@mixin _oTopperProvide($paths...) {
	@each $keys in $paths {
		$joined: -o-topper-join-string($keys, '-');

		$-debug-providers-with-no-receive: map-merge(
			$-debug-providers-with-no-receive,
			($joined: true)
		) !global;

		%-o-topper-receive-#{$joined} {
			@content;
		}
	}
}

@mixin oTopperOutputThemes() {
	@each $theme in $-o-topper-themes {
		.o-topper--#{$theme} {
			@include _oTopperReceive(theme $theme);
		}
	}
}

// uses topper background colour to set background and pick contrasting text color
@mixin oTopperColor($bg-color) {
	@include _oTopperProvide(color) {
		$text-color: black;
		$hover-color: lighten($text-color, 40%);
		$contrast: lightness(oColorsGetPaletteColor($bg-color));
		@if $contrast <= 50% {
			$text-color: white;
			$hover-color: darken($text-color, 20%);

			@include _oTopperProvide(element standfirst) {
				a {
					color: $text-color;
					border-bottom-color: $text-color;

					&:hover {
						color: $hover-color;
						border-bottom-color: $hover-color;
					}
				}
			}
		}

		@include _oTopperProvide(element headline) {
			&::after {
				border-bottom: 6px solid $text-color;
				@include oGridRespondTo($from: L) {
					border-bottom-width: 8px;
				}
			}
		}

		@if $bg-color == 'wheat' {
			background-color: oColorsMix($color: 'wheat', $percentage: 40);
		} @else {
			background-color: oColorsGetPaletteColor($bg-color);
		}

		@include _oTopperProvide(
			element tags,
			element columnist name,
			element headline,
			element standfirst,
			element summary
		) {
			color: $text-color;
		}

		// TODO: work out what to do with tags
		.o-topper__tags .n-content-tag {
			color: $text-color;
			&:hover {
				color: oColorsMix($text-color, $bg-color, 73);
			}
		}

		@if $bg-color == 'paper' or $bg-color == 'wheat' {
			.o-topper__tags .n-content-tag:not(.n-content-tag--brand),
			.o-topper__columnist-name {
				@include oColorsFor(tag-link, text);

				&:hover {
					@include oColorsFor(tag-link-hover, text);
				}
			}
		}

		@if $bg-color == 'sky' {
			@include _oTopperProvide(
				element tags,
				element topic,
				element columnist name
			) {
				color: oColorsGetPaletteColor('oxford');

				&:hover {
					color: oColorsGetPaletteColor('black-80');
				}
			}
		}
	}
}

@mixin _oTopperAlignText($position) {
	$mleft: ('left': 0, 'center': auto, 'right': auto);
	$mright: ('left': auto, 'center': auto, 'right': 0);
	$value: ('left': flex-start, 'center': center, 'right': flex-end);

	@include _oTopperProvide(element headline large) {
		&:after {
			margin-left: map-get($mleft, #{$position});
			margin-right: map-get($mright, #{$position});
		}
	}

	@include _oTopperProvide(layout content) {
		text-align: $position;
		align-self: map-get($value, #{$position});
	}

	@include _oTopperProvide(element tags) {
		justify-content: map-get($value, #{$position});
	}
}

// TODO: seems to be unused
@mixin _oTopperStackTags {
	@include _oTopperProvide(element tags) {
		flex-direction: column;
		justify-content: center;
		padding-bottom: 15px;
		.n-content-tag {
			padding-bottom: 5px;
		}
	}
}

// scss-lint:disable SelectorFormat

@function _o-topper-join-string($list, $separator: '') {
	$result: '';
	$first: true;

	@each $item in $list {
		@if ($first) {
			$result: $item;
			$first: false;
		} @else {
			$result: $result + $separator + $item;
		}
	}

	@return $result;
}

@mixin _oTopperReceiveOne($keys) {
	$key: _o-topper-join-string($keys, '-');

	$_o-topper-debug-providers-with-no-receive: map-merge(
		$_o-topper-debug-providers-with-no-receive,
		($key: false)
	) !global;

	// TODO: because, what declaration? hmm, sass-lint?
	@extend %_o-topper-receive-#{$key}; // sass-lint:disable-line extends-before-declarations
}

@mixin _oTopperReceive($paths...) {
	@each $item in $paths {
		@if type-of($item) == 'map' {
			@each $namespace, $key in $item {
				@include _oTopperReceiveOne(($namespace, $key));
			}
		} @else {
			@error Unexpected receiver spec $item;
		}
	}
}

@mixin _oTopperProvideOne($keys) {
	$namespace: nth($keys, 1);
	$key: _o-topper-join-string($keys, '-');
	$key-without-namespace: str-slice($key, str-length($namespace) + 2);

	@if map-has-key($_o-topper-debug-providers-with-no-receive, $key) == false {
		$_o-topper-debug-providers-with-no-receive: map-merge(
			$_o-topper-debug-providers-with-no-receive,
			($key: true)
		) !global;
	}

	@if map-has-key($_o-topper-provider-namespaces, $namespace) {
		$_o-topper-provider-namespaces: map-merge(
			$_o-topper-provider-namespaces,
			(
				$namespace: append(
					map-get($_o-topper-provider-namespaces, $namespace),
					$key-without-namespace
				)
			)
		) !global;
	} @else {
		$_o-topper-provider-namespaces: map-merge(
			$_o-topper-provider-namespaces,
			(
				$namespace: ($key-without-namespace)
			)
		) !global;
	}

	%_o-topper-receive-#{$key} {
		@content;
	}
}

@mixin _oTopperProvide($paths...) {
	@each $item in $paths {
		@if type-of($item) == 'map' {
			@each $namespace, $key in $item {
				@include _oTopperProvideOne(($namespace, $key)) {
					@content
				};
			}
		} @else {
			@error Unexpected provider spec $item;
		}
	}
}

@mixin _oTopperProvideAll($paths...) {
	@each $item in $paths {
		@if type-of($item) == 'map' {
			@each $namespace, $key in $item {
				@include _oTopperProvideOne(($namespace, $key)) {
					@content
				};
			}
		} @else {
			@error Unexpected provider spec $item;
		}
	}
}

@function _o-topper-provider-class($namespace, $key) {
	$separator: '--';
	@if $namespace == 'element' or $namespace == 'layout' {
		$separator: '__';
	}

	@if $namespace == 'root' {
		@return '.o-topper';
	} @else {
		@return '.o-topper#{$separator}#{$key}';
	}
}

@mixin oTopperOutput($namespace) {
	$paths: map-get($_o-topper-provider-namespaces, $namespace);

	@each $key in $paths {
		#{_o-topper-provider-class($namespace, $key)} {
			@include _oTopperReceive(($namespace: $key));
		}
	}
}

// uses topper background colour to set background and pick contrasting text color
@mixin oTopperColor($bg-color) {
	@include _oTopperProvide((modifier: color)) {
		$text-color: black;
		$hover-color: lighten($text-color, 40%);
		$contrast: lightness(oColorsGetPaletteColor($bg-color));
		@if $contrast <= 50% {
			$text-color: white;
			$hover-color: darken($text-color, 20%);

			@include _oTopperProvide((element: standfirst)) {
				a {
					color: $text-color;
					border-bottom-color: $text-color;

					&:hover {
						color: $hover-color;
						border-bottom-color: $hover-color;
					}
				}
			}
		}

		@include _oTopperProvide((element: headline)) {
			&::after {
				border-bottom: 6px solid $text-color;
				@include oGridRespondTo($from: L) {
					border-bottom-width: 8px;
				}
			}
		}

		@if $bg-color == 'wheat' {
			background-color: oColorsMix($color: 'wheat', $percentage: 40);
		} @else {
			background-color: oColorsGetPaletteColor($bg-color);
		}

		@include _oTopperProvide(
			(element: tags),
			(element: columnist-name),
			(element: headline),
			(element: standfirst),
			(element: summary)
		) {
			color: $text-color;
		}

		@include _oTopperProvide(
			(element: tag),
			(element: brand)
		) {
			color: $text-color;

			&:hover {
				color: oColorsMix($text-color, $bg-color, 73);
			}
		}

		@if $bg-color == 'paper' or $bg-color == 'wheat' {
			@include _oTopperProvide(
				(element: tag),
				(element: columnist-name)
			) {
				@include oColorsFor(tag-link, text);

				&:hover {
					@include oColorsFor(tag-link-hover, text);
				}
			}
		}

		@if $bg-color == 'sky' {
			@include _oTopperProvide(
				(element: tags),
				(element: topic),
				(element: columnist-name)
			) {
				color: oColorsGetPaletteColor('oxford');

				&:hover {
					color: oColorsGetPaletteColor('black-80');
				}
			}
		}
	}
}

@mixin _oTopperAlignText($position) {
	$mleft: ('left': 0, 'center': auto, 'right': auto);
	$mright: ('left': auto, 'center': auto, 'right': 0);
	$value: ('left': flex-start, 'center': center, 'right': flex-end);

	@include _oTopperProvide((element: headline--large)) {
		&:after {
			margin-left: map-get($mleft, #{$position});
			margin-right: map-get($mright, #{$position});
		}
	}

	@include _oTopperProvide((layout: content)) {
		text-align: $position;
		align-self: map-get($value, #{$position});
	}

	@include _oTopperProvide((element: tags)) {
		justify-content: map-get($value, #{$position});
	}
}
